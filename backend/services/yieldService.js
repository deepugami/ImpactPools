/**
 * Yield Generation Service
 * Calculates and applies yield to all active pools every 10 minutes
 * This simulates real DeFi yield generation over time
 */

class YieldService {
  constructor() {
    this.isRunning = false;
    this.interval = null;
    this.YIELD_UPDATE_INTERVAL = 10 * 60 * 1000; // 10 minutes in milliseconds
    
    console.log('Ì≤∞ [YIELD] Service initialized - 10 minute intervals');
  }

  /**
   * Start the yield generation process
   */
  start(getPoolsCallback, savePoolsCallback) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è [YIELD] Service already running');
      return;
    }

    this.getPoolsCallback = getPoolsCallback;
    this.savePoolsCallback = savePoolsCallback;
    this.isRunning = true;

    // Run immediately on start
    this.generateYieldForAllPools();

    // Set up 10-minute interval
    this.interval = setInterval(() => {
      this.generateYieldForAllPools();
    }, this.YIELD_UPDATE_INTERVAL);

    console.log('Ì∫Ä [YIELD] Service started - generating yield every 10 minutes');
  }

  /**
   * Stop the yield generation process
   */
  stop() {
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    this.isRunning = false;
    console.log('Ìªë [YIELD] Service stopped');
  }

  /**
   * Generate yield for all active pools
   */
  async generateYieldForAllPools() {
    try {
      const pools = this.getPoolsCallback();
      if (!pools || pools.length === 0) {
        console.log('Ì≥ä [YIELD] No pools found to generate yield for');
        return;
      }

      console.log(\`Ì≤∞ [YIELD] Generating yield for \${pools.length} pools...\`);
      let totalNewYield = 0;
      let totalNewDonations = 0;
      let updatedPools = 0;

      const updatedPoolsData = pools.map(pool => {
        const yieldData = this.calculatePoolYield(pool);
        
        if (yieldData.newYield > 0) {
          updatedPools++;
          totalNewYield += yieldData.newYield;
          totalNewDonations += yieldData.donationAmount;

          console.log(\`‚úÖ [YIELD] Pool "\${pool.name}": +$\${yieldData.newYield.toFixed(6)} yield, +$\${yieldData.donationAmount.toFixed(6)} donated\`);
        }

        return yieldData.updatedPool;
      });

      // Save updated pools
      this.savePoolsCallback(updatedPoolsData);

      console.log(\`ÌæØ [YIELD] Completed: \${updatedPools} pools updated, +$\${totalNewYield.toFixed(2)} total yield, +$\${totalNewDonations.toFixed(2)} total donations\`);

    } catch (error) {
      console.error('‚ùå [YIELD] Error generating yield:', error);
    }
  }

  /**
   * Calculate yield for a specific pool
   */
  calculatePoolYield(pool) {
    try {
      // Only generate yield if pool has deposits
      if (!pool.totalDeposited || pool.totalDeposited <= 0) {
        return { updatedPool: pool, newYield: 0, donationAmount: 0 };
      }

      // Calculate yield based on APY and time elapsed (10 minutes)
      const annualAPY = (pool.currentAPY || 4.2) / 100; // Convert percentage to decimal
      const minutesElapsed = 10; // 10-minute intervals
      const minutesPerYear = 365 * 24 * 60; // Minutes in a year
      
      // Calculate yield for this 10-minute period
      const periodMultiplier = minutesElapsed / minutesPerYear;
      const yieldForPeriod = pool.totalDeposited * annualAPY * periodMultiplier;

      // Calculate donations based on donation percentage
      const donationPercentage = pool.donationPercentage || 0;
      const donationAmount = yieldForPeriod * (donationPercentage / 100);
      const lenderAmount = yieldForPeriod - donationAmount;

      // Update pool with accumulated yield and donations
      const updatedPool = {
        ...pool,
        totalYieldGenerated: (pool.totalYieldGenerated || 0) + yieldForPeriod,
        totalDonated: (pool.totalDonated || 0) + donationAmount,
        lastYieldUpdate: new Date().toISOString(),
        
        // Add yield distribution transaction record
        transactions: [
          ...(pool.transactions || []),
          {
            id: \`yield_\${Date.now()}_\${Math.random().toString(36).substr(2, 9)}\`,
            type: 'yield_distribution',
            amount: yieldForPeriod,
            donationAmount: donationAmount,
            lenderAmount: lenderAmount,
            asset: 'XLM',
            timestamp: new Date().toISOString(),
            periodAPY: annualAPY * 100,
            isAutoGenerated: true
          }
        ]
      };

      return {
        updatedPool,
        newYield: yieldForPeriod,
        donationAmount: donationAmount
      };

    } catch (error) {
      console.error(\`‚ùå [YIELD] Error calculating yield for pool \${pool.id}:\`, error);
      return { updatedPool: pool, newYield: 0, donationAmount: 0 };
    }
  }

  /**
   * Get service status
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      intervalMinutes: this.YIELD_UPDATE_INTERVAL / (60 * 1000),
      nextUpdate: this.isRunning ? new Date(Date.now() + this.YIELD_UPDATE_INTERVAL).toISOString() : null
    };
  }
}

// Export singleton instance
const yieldService = new YieldService();
export default yieldService;
